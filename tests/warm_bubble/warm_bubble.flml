<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">warm_bubble-adaptive</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="src/vbox">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">20.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">4.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">2800.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">100</integer_value>
      <tolerance>
        <real_value rank="0">1.E-10</real_value>
        <infinity_norm/>
      </tolerance>
    </nonlinear_iterations>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">2.0</real_value>
      </requested_cfl>
      <courant_number name="CFLNumber">
        <mesh name="VelocityMesh"/>
      </courant_number>
      <maximum_timestep>
        <real_value rank="0">4.0</real_value>
      </maximum_timestep>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="2" dim1="dim" rank="1">0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Gas">
    <equation_of_state>
      <compressible>
        <giraldo2>
          <reference_pressure>
            <real_value rank="0">1.0e5</real_value>
          </reference_pressure>
          <C_P>
            <real_value rank="0">1000.0</real_value>
          </C_P>
          <C_V>
            <real_value rank="0">714.285714</real_value>
          </C_V>
        </giraldo2>
      </compressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_compressible_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1e-10</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0.1e-10</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1000.0
  cv=714.285714
  R=cp-cv
  theta0=300.0
  g=9.81
  expres=1-g*X[1]/(theta0*cp)
  
  pressure=p0*expres**(cp/R)
  return pressure</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FirstOrderUpwind"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1000.0
  cv=714.285714
  R=cp-cv
  theta0=300.0
  g=9.81
  expres=1-g*X[1]/(theta0*cp)
  
  pressure=p0*expres**(cp/R)
 
  x_c=500.0
  y_c=350.0
  r=sqrt((X[0] - x_c)**2 + (X[1] - y_c)**2)
  r_c=250.0
  theta_bar=300.0
  if r &lt; r_c:
  	theta_dash=0.25*(1.0+cos(pi*r/r_c))
  else:
  	theta_dash=0.0
  
  theta=theta_bar+theta_dash
  density=p0/(R*theta)*expres**(cv/R)
  return density</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <advection_terms/>
            <stress_terms>
              <stress_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-10</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0.1e-10</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="nnf_top_bottom">
          <surface_ids>
            <integer_value shape="2" rank="1">8 9</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="nnf_left_right">
          <surface_ids>
            <integer_value shape="2" rank="1">10 11</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="InternalEnergy" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="InternalEnergy">
          <density name="Density"/>
        </equation>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms/>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.0e-10</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0.1e-10</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1000.0
  cv=714.285714
  R=cp-cv
  theta0=300.0
  g=9.81
  expres=1-g*X[1]/(theta0*cp)
 
  x_c=500.0
  y_c=350.0
  r=sqrt((X[0] - x_c)**2 + (X[1] - y_c)**2)
  r_c=250.0
  theta_bar=300.0
  if r &lt; r_c:
  	theta_dash=0.25*(1.0+cos(pi*r/r_c))
  else:
  	theta_dash=0.0
  
  theta=theta_bar+theta_dash
  ie=cv*theta*expres
  return ie</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="HydroStaticBalancePressure" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1000.0
  cv=714.285714
  R=cp-cv
  theta0=300.0
  g=9.81
  expres=1-g*X[1]/(theta0*cp)
  
  pressure=p0*expres**(cp/R)
  return pressure</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prescribed>
    </scalar_field>
    <scalar_field name="HydroStaticBalanceDensity" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1000.0
  cv=714.285714
  R=cp-cv
  theta0=300.0
  g=9.81
  expres=1-g*X[1]/(theta0*cp)
   
  theta=300.0
  density=p0/(R*theta)*expres**(cv/R)
  return density</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prescribed>
    </scalar_field>
    <scalar_field name="PotentialTempPert" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">y=state.scalar_fields["ycoord"]
u=state.vector_fields["Velocity"]
inten=state.scalar_fields["InternalEnergy"]
pres=state.scalar_fields["Pressure"]
dens=state.scalar_fields["Density"]

from math import sqrt, sin, cos, atan2, acos, asin, pi, exp
from numpy import *

pt_pert=zeros(field.node_count)
u_node=zeros(2)

p0=1.0e5
cp=1000.0
cv=714.285714
R=cp-cv

for n in range(field.node_count):
  u_node=u.node_val(n)
  ie=inten.node_val(n)
  h=y.node_val(n)
  p=pres.node_val(n)
  expr=(p/p0)**(R/cp)
  pt_pert[n] = (1.0/(expr*cv))*(ie)-300.0

for n in range(field.node_count):
  field.set(n,pt_pert[n])</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field name="InterpolationErrorBound" rank="0">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.005</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="ycoord" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
    y=X[1]
    return y</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prescribed>
    </scalar_field>
    <scalar_field name="density_pert" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">y=state.scalar_fields["ycoord"]
u=state.vector_fields["Velocity"]
inten=state.scalar_fields["InternalEnergy"]
pres=state.scalar_fields["Pressure"]
dens=state.scalar_fields["Density"]

from math import sqrt, sin, cos, atan2, acos, asin, pi, exp
from numpy import *

d_pert=zeros(field.node_count)
u_node=zeros(2)

p0=1.0e5
cp=1000.0
cv=714.285714
R=cp-cv
g=9.81

for n in range(field.node_count):
  u_node=u.node_val(n)
  ie=inten.node_val(n)
  h=y.node_val(n)
  density=dens.node_val(n)
  expres=1-g*h/(300.0*cp)
  d0=p0/(R*300.0)*expres**(cv/R)
  d_pert[n] = density-d0

for n in range(field.node_count):
  field.set(n,d_pert[n])</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="CFLNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressurePert" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="python" lines="20">y=state.scalar_fields["ycoord"]
u=state.vector_fields["Velocity"]
inten=state.scalar_fields["InternalEnergy"]
pres=state.scalar_fields["Pressure"]
hpres=state.scalar_fields["HydroStaticBalancePressure"]
dens=state.scalar_fields["Density"]

from math import sqrt, sin, cos, atan2, acos, asin, pi, exp
from numpy import *

dp_pert=zeros(field.node_count)

for n in range(field.node_count):
  dp_pert[n] = pres.node_val(n)-hpres.node_val(n)

for n in range(field.node_count):
  field.set(n,dp_pert[n])</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period>
        <real_value rank="0">20.0</real_value>
      </period>
      <maximum_number_of_nodes>
        <integer_value rank="0">1000000</integer_value>
      </maximum_number_of_nodes>
      <enable_gradation>
        <gradation_parameter>
          <real_value rank="0">1.75</real_value>
        </gradation_parameter>
      </enable_gradation>
      <metric_advection>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FirstOrderUpwind"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <maximum_courant_number_per_subcycle>
            <real_value rank="0">0.25</real_value>
            <courant_number name="ControlVolumeCFLNumber"/>
          </maximum_courant_number_per_subcycle>
          <scale_advection_time>
            <real_value rank="0">1.1</real_value>
          </scale_advection_time>
          <control_volumes/>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.e-5</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
      </metric_advection>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">5.0 5.0 5.0 5.0</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" dim2="dim" shape="2 2" dim1="dim" rank="2">100.0 0.0 0.0 100.0</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
    </hr_adaptivity>
  </mesh_adaptivity>
</fluidity_options>
